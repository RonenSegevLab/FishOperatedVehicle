#!/usr/bin/env python

# -*- coding: utf-8 -*-

"""
Created on Thu Sep  5 10:09:21 2019
@author: Matan Samina
"""

import rospy
import numpy as np
from nav_msgs.msg import OccupancyGrid
from rospy.numpy_msg import numpy_msg
from rospy_tutorials.msg import Floats


class maps:

    def __init__(self):
        

        rospy.init_node('listener', anonymous=True)
        
        self.started = False  # 'started': if map recived -> true
        self.pub = rospy.Publisher('LM1', numpy_msg(Floats),queue_size=1)  # publisher of landmarks of map
        self.mapLM = None
        self.mapOG = rospy.Subscriber("/ABot1/map", OccupancyGrid , self.callbackM )

        
        r = rospy.Rate(0.1) # 0.1 hz
     
        while not rospy.is_shutdown():

            if (self.started):
                self.pub.publish(self.mapLM.ravel())
            r.sleep()        

    def callbackM(self ,msg):
  
        maps = np.array(msg.data , dtype = np.float32)
        N = np.sqrt(maps.shape)[0].astype(np.int32)
        Re = np.copy(maps.reshape((N,N)))
        
        #convert to landmarks array
        scale = msg.info.resolution
        CenterShift = msg.info.width/20   
        landMarksArray = (np.argwhere( Re == 100 ) * scale) # - np.array([CenterShift ,CenterShift]) 
       # print landMarksArray
        
        self.mapLM = landMarksArray.astype(np.float32) #-np.array()
 
        self.started = True   

def listener():

    print ("init     convert map to landmarks")
    LM_maps = maps() # convert maps to landmarks arrays
    rospy.spin()

if __name__ == '__main__':
    listener()
